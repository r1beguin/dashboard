{"version":3,"sources":["features/Weather/Cloud.js","features/Weather/Rain.js","features/Weather/Sun.js","features/Weather/Weather.js","features/Stocks/Stocks.js","features/Calendar/Calendar.js","features/Dashboard/Dashboard.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["ParralaxBigCloud","styled","Box","props","moveX","ParralaxLittleCloud","Cloud","pos","Stack","anchor","style","opacity","background","width","height","round","elevation","parseFloat","match","pad","right","ParralaxDrop","Rain","align","direction","justify","margin","gap","ParralaxRay","Sun","Weather","React","useState","data","setData","date","setDate","time","setTime","refresh","setRefresh","weather","setWeather","useEffect","fetch","secret","then","response","json","currently","icon","setInterval","d","Date","ye","Intl","DateTimeFormat","year","format","mo","month","da","day","j","weekday","h","getHours","m","getMinutes","bottom","fill","Button","Refresh","onClick","Text","temperature","toString","weight","Stocks","current","setCurrent","situation","useContext","ResponsiveContext","arr","chart","result","indicators","quote","close","map","item","i","unix_timestamp","timestamp","formattedTime","toLocaleString","timeZone","push","x","quoteResponse","ask","color","top","left","dataKey","hide","interval","tick","contentStyle","type","stroke","dot","Calendar","next","setNext","ApiCalendar","sign","listUpcomingEvents","console","log","items","label","handleAuthClick","start","dateTime","end","size","overflow","summary","Dashboard","as","theme","global","colors","brand","back","card","accent","ok","font","family","App","setPos","Grommet","full","onMouseMove","e","screenX","path","configureStore","reducer","Boolean","window","location","hostname","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4e856107.chunk.js","sourcesContent":["import React from \"react\";\n\nimport { Box, Stack } from \"grommet\";\nimport styled from \"styled-components\";\n\nconst ParralaxBigCloud = styled(Box)`\n    transform: translateX(${props => props.moveX}) ;  \n`;\nconst ParralaxLittleCloud = styled(Box)`\n    transform: translateX(${props => props.moveX}); \n`;\n\nconst Cloud = ({pos}) => {\n\n    return (\n        <Stack anchor=\"bottom\" style={{opacity: 0.5}} >\n\n            <ParralaxBigCloud background=\"#edf4f5\" width=\"160px\" height=\"50px\" round=\"medium\" elevation=\"small\" moveX={() => {\n                     const x = parseFloat(pos.match(/^\\d*.\\d{2}/g,''))*0.25\n                     return x+\"px\"\n                }} />\n            <Stack anchor=\"right\" >\n                <Box pad={{right: \"10px\"}}>\n                    <ParralaxBigCloud background=\"#daeff2\" width=\"100px\" height=\"100px\" round=\"full\" moveX={pos}  />\n                </Box>\n                <ParralaxLittleCloud background=\"#a9d1d6\" width=\"70px\" height=\"70px\" round=\"full\" moveX={() => {\n                     const x = parseFloat(pos.match(/^\\d*.\\d{2}/g,''))*0.5\n                     return x+\"px\"\n                }}/>\n            </Stack>\n            \n        </Stack>\n        \n    )\n}\n\n\nexport default Cloud;","import React from \"react\";\n\nimport { Box, Stack } from \"grommet\";\nimport styled from \"styled-components\";\n\n\nconst ParralaxBigCloud = styled(Box)`\n    transform: translateX(${props => props.moveX}) ;  \n`;\nconst ParralaxLittleCloud = styled(Box)`\n    transform: translateX(${props => props.moveX}); \n`;\nconst ParralaxDrop = styled(Box)`\n    transform: translate(${props => props.moveX}, ${props => props.moveX}); \n    \n`;\n\nconst Rain = ({pos}) => {\n\n    return (\n        <Box align=\"center\">\n        <Stack anchor=\"bottom\" style={{opacity: 0.5}} >\n\n            <ParralaxBigCloud background=\"#edf4f5\" width=\"160px\" height=\"50px\" round=\"medium\" elevation=\"small\" moveX={() => {\n                     const x = parseFloat(pos.match(/^\\d*.\\d{2}/g,''))*0.25\n                     return x+\"px\"\n                }} />\n            <Stack anchor=\"right\" >\n                <Box pad={{right: \"10px\"}}>\n                    <ParralaxBigCloud background=\"#daeff2\" width=\"100px\" height=\"100px\" round=\"full\" moveX={pos}  />\n                </Box>\n                <ParralaxLittleCloud background=\"#a9d1d6\" width=\"70px\" height=\"70px\" round=\"full\" moveX={() => {\n                     const x = parseFloat(pos.match(/^\\d*.\\d{2}/g,''))*0.5\n                     return x+\"px\"\n                }}/>\n            </Stack>\n            \n        </Stack>\n        <Box direction=\"row\" justify='between' margin=\"small\" gap=\"small\"> \n            <ParralaxDrop width=\"10px\" height=\"10px\" round=\"full\" background=\"neutral-3\" moveX={() => {\n                     const x = parseFloat(pos.match(/^\\d*.\\d{2}/g,''))*0.25\n                     return x+\"px\"\n                }}/>\n            <ParralaxDrop width=\"10px\" height=\"10px\" round=\"full\" background=\"neutral-3\" moveX={() => {\n                     const x = parseFloat(pos.match(/^\\d*.\\d{2}/g,''))*0.35\n                     return x+\"px\"\n                }}/>\n            <ParralaxDrop width=\"10px\" height=\"10px\" round=\"full\" background=\"neutral-3\" moveX={() => {\n                     const x = parseFloat(pos.match(/^\\d*.\\d{2}/g,''))*0.25\n                     return x+\"px\"\n                }}/>\n            <ParralaxDrop width=\"10px\" height=\"10px\" round=\"full\" background=\"neutral-3\" moveX={() => {\n                     const x = parseFloat(pos.match(/^\\d*.\\d{2}/g,''))*0.35\n                     return x+\"px\"\n                }}/>\n           \n        </Box>\n    </Box>\n    )\n}\n\n\nexport default Rain;","import React from \"react\";\n\nimport { Box, Stack } from \"grommet\";\nimport styled from \"styled-components\";\n\nconst ParralaxRay = styled(Box)`\n    transform: rotate(${props => props.moveX}) ;  \n`;\n\n\nconst Sun = ({pos}) => {\n\n    return (\n    \n        <Stack anchor=\"center\" style={{opacity: 0.5}} >\n\n            <Box background=\"status-warning\" width=\"xsmall\" height=\"xsmall\" round=\"full\" elevation=\"small\" moveX={() => {\n                     const x = parseFloat(pos.match(/^\\d*.\\d{2}/g,''))*0.25\n                     return x+\"px\"\n                }} />\n            <ParralaxRay background=\"status-warning\" width=\"130px\" height=\"10px\" round=\"small\"  moveX={() => {\n                     const x = parseFloat(pos.match(/^\\d*.\\d{2}/g,''))\n                     return x+\"deg\"\n                }} />\n            <ParralaxRay background=\"status-warning\" width=\"10px\" height=\"130px\" round=\"small\"  moveX={() => {\n                     const x = parseFloat(pos.match(/^\\d*.\\d{2}/g,''))\n                     return x+\"deg\"\n                }} />\n            <ParralaxRay background=\"status-warning\" width=\"10px\" height=\"130px\" round=\"small\"  moveX={() => {\n                     const x = parseFloat(pos.match(/^\\d*.\\d{2}/g,''))\n                     return 45+x+\"deg\"\n                }} />\n            <ParralaxRay background=\"status-warning\" width=\"10px\" height=\"130px\" round=\"small\"  moveX={() => {\n                     const x = parseFloat(pos.match(/^\\d*.\\d{2}/g,''))\n                     return x-45+\"deg\"\n                }} />\n            \n        </Stack>\n\n    )\n}\n\n\nexport default Sun;","import React from \"react\";\n\nimport { Box, Text, Stack, Button } from \"grommet\";\nimport { Refresh } from \"grommet-icons\"\n\nimport Cloud from \"./Cloud\";\nimport Rain from \"./Rain\";\nimport Sun from \"./Sun\";\n\nimport secret from \"../../secret.json\";\n\nconst Weather = ({pos}) => {\n\n    const [data, setData] = React.useState();\n    const [date, setDate] = React.useState('');\n    const [time, setTime] = React.useState('');\n    const [refresh, setRefresh] = React.useState(true);\n    const [weather, setWeather] = React.useState(\"sun\");\n\n    React.useEffect(() => {\n\n        \n        if (refresh) {\n            fetch(\"https://dark-sky.p.rapidapi.com/43.603951,1.444510?lang=en&units=auto\", {\n                \"method\": \"GET\",\n                \"headers\": {\n                    \"x-rapidapi-key\": secret,\n                    \"x-rapidapi-host\": \"dark-sky.p.rapidapi.com\"\n                }\n            })\n                .then(response => response.json())\n                .then(data => {setData(data);setWeather(data.currently.icon)})\n                setRefresh(false)  \n                \n        }\n            setInterval(() => {\n                const d = new Date();\n                const ye = new Intl.DateTimeFormat('fr', { year: 'numeric' }).format(d);\n                const mo = new Intl.DateTimeFormat('fr', { month: 'long' }).format(d);\n                const da = new Intl.DateTimeFormat('fr', { day: 'numeric' }).format(d);\n                const j = new Intl.DateTimeFormat('fr', { weekday: 'long' }).format(d);\n                const h = d.getHours();\n                const m = d.getMinutes();\n                \n                setDate(j+\" \"+da+\" \"+mo+\" \"+ye);\n                setTime(h+\" : \"+m)\n            }, 1000)\n        \n       \n\n    }, [refresh])\n\n    return (\n        <Box  background=\"card\" round=\"small\" pad={{bottom:\"small\"}} width=\"medium\" margin=\"small\" justify=\"center\" align=\"center\">\n            <Box fill=\"horizontal\" align=\"end\">\n                <Button icon={<Refresh />} onClick={() => setRefresh(true)} />\n            </Box>\n            \n                <Stack anchor=\"center\" margin={{ bottom:\"medium\"}}>\n\n\n                    {data && weather === \"rain\" ? (\n                        <Rain pos={pos} />\n                    ):data && weather === \"cloudy\" || weather=== \"partly-cloudy-day\" ?(\n                        <Cloud pos={pos} />\n                    ) : data && weather === \"clear-day\" ?(\n                        <Sun pos={pos} />\n                    ) :(\n                        <Sun pos={pos}/>\n                    )}\n                    \n                    <Text>{data && data.currently.temperature.toString().match(/^\\d*/g,'')} C°</Text>\n                </Stack>\n                \n            \n            <Box align=\"center\">\n                <Text weight=\"bold\">{date}</Text>\n                <Text >{time}</Text>\n                <Text >{data && data.currently.icon}</Text>\n            </Box>        \n        </Box>\n    )\n}\n\n\nexport default Weather;","import React from \"react\";\n\nimport { Box, Text, ResponsiveContext, Button } from \"grommet\";\nimport { Refresh } from \"grommet-icons\"\nimport {LineChart, Line, XAxis, YAxis, Tooltip} from \"recharts\";\n\nimport secret from \"../../secret.json\";\n\nconst Stocks = () => {\n\n    const [data, setData] = React.useState();\n    const [time, setTime] = React.useState('interval=1d&range=1y');\n    const [current, setCurrent] =React.useState();\n    const [situation, setSituation] = React.useState(7);\n    const [refresh, setRefresh] = React.useState(true);\n\n    const size = React.useContext(ResponsiveContext);\n\n    React.useEffect(() => {\n\n        if (refresh) {\n\n            fetch(`https://apidojo-yahoo-finance-v1.p.rapidapi.com/stock/v2/get-chart?${time}&symbol=TSLA&region=US`, {\n                \"method\": \"GET\",\n                \"headers\": {\n                    \"x-rapidapi-key\": secret,\n                    \"x-rapidapi-host\": \"apidojo-yahoo-finance-v1.p.rapidapi.com\"\n                }\n            })\n            .then(response => response.json())\n            .then(data => { \n                const arr = [];\n                data.chart.result[0].indicators.quote[0].close.map((item,i) => {\n                    let unix_timestamp = data.chart.result[0].timestamp[i]\n                    var date = new Date(unix_timestamp * 1000);\n                    var formattedTime = date.toLocaleString('en-GB', { timeZone: 'UTC' });\n                    arr.push({x: formattedTime, close: item})\n\n            })\n                setData(arr)\n            })\n\n            \n            fetch(\"https://apidojo-yahoo-finance-v1.p.rapidapi.com/market/v2/get-quotes?symbols=TSLA&region=US\", {\n                \"method\": \"GET\",\n                \"headers\": {\n                    \"x-rapidapi-key\": \"396c8c801cmsh03d8aa703d5356cp10f6bfjsneeb135511ccb\",\n                    \"x-rapidapi-host\": \"apidojo-yahoo-finance-v1.p.rapidapi.com\"\n                }\n            })\n            .then(response => \n                response.json()\n                \n            )\n            .then(data => {setCurrent(data.quoteResponse.result[0].ask)})\n            \n            setRefresh(false);\n        }\n\n    }, [refresh,time])\n\n    return (\n        <Box  background=\"card\" width=\"medium\" round=\"small\" pad=\"small\"  margin=\"small\" justify=\"center\" align=\"center\" >\n\n            <Box fill=\"horizontal\" align=\"end\">\n                <Button icon={<Refresh />} onClick={() => setRefresh(true)} />\n            </Box>\n\n            <Box align=\"center\">\n                <Text color=\"accent\">{current} $</Text>\n                <Text color=\"accent\">{(situation*current).toString().match(/^\\d+/g,'')} $</Text>\n                          \n            </Box>\n\n            <Box>\n                <LineChart width={350} height={150} data={data}\n                margin={{top: 5, right: 30, left: 20}}>\n                    <XAxis dataKey=\"x\" hide interval=\"preserveStartEnd\" tick={false} />\n                    <YAxis tick={false} hide />\n                    \n                    <Tooltip contentStyle={{color: \"#994650\"}}/>\n                    \n                    <Line dataKey=\"close\" type=\"monotone\"  stroke=\"#cc0000\" dot={false}/>\n                </LineChart>\n            </Box>\n             \n        </Box>\n    )\n}\n\n\nexport default Stocks;","import React from \"react\";\n\nimport { Box, Text, ResponsiveContext, Button } from \"grommet\";\nimport { Refresh } from \"grommet-icons\"\n\nimport ApiCalendar from 'react-google-calendar-api';\n\n\nconst Calendar = () => {\n\n    const [next, setNext] = React.useState();\n    const size = React.useContext(ResponsiveContext);\n\n\n    React.useEffect(() => {\n        if (ApiCalendar.sign)\n        ApiCalendar.listUpcomingEvents(5)\n          .then(({result}: any) => {\n            console.log(result.items);\n            setNext(result.items);\n            \n          });\n    }, [ApiCalendar.sign])\n\n    return (\n        <Box  background=\"card\" round=\"small\" pad=\"small\"  margin=\"small\" justify=\"center\" align=\"center\" width=\"medium\" height=\"small\n        \">\n            <Text>Calendar</Text>\n            {!ApiCalendar.sign && (\n                <Box align=\"center\" justify=\"center\" gap=\"small\" margin=\"small\">\n                    <Button label=\"Connexion\" onClick={() => ApiCalendar.handleAuthClick()} color=\"brand\"/>\n                </Box>\n            )}\n            <Box height=\"small\" gap=\"xxsmall\">\n\n            {next && \n                next.map(item => {\n                    const start = new Date(item.start.dateTime);\n                    const end = new Date(item.end.dateTime)\n                    return (\n                        <Box background=\"accent\"  pad=\"small\" width=\"medium\" round=\"small\" direction=\"row\" align=\"center\" justify=\"around\" elevation=\"xxsmall\">\n                            <Text size=\"xsmall\">{start && start.toLocaleString().match(/^\\d+\\/\\d+\\/\\d+/g,'')}</Text>\n                            <Box>\n                                <Text size=\"xsmall\">{start && start.toLocaleString().match(/\\d+:\\d+/g,'')}</Text>\n                                <Text size=\"xsmall\">{end && end.toLocaleString().match(/\\d+:\\d+/g,'')}</Text>\n                            </Box>\n                            <Box align=\"center\" justify=\"center\" overflow=\"auto\" width=\"xsmall\">\n                                <Text size=\"xsmall\" >{item.summary}</Text>\n                                \n                            </Box>\n                        </Box>\n                    )\n                })\n               \n            }\n            </Box>\n             \n        </Box>\n    )\n}\n\n\nexport default Calendar;","import React from 'react';\n\nimport {Box, Text,ResponsiveContext} from 'grommet';\n\nimport Weather from \"../Weather/Weather\"\nimport Stocks from \"../Stocks/Stocks\";\nimport Calendar from \"../Calendar/Calendar\"\n\nconst Dashboard = ({pos}) => {\n\n    const size = React.useContext(ResponsiveContext);\n\n\n    return(\n        <Box  align=\"center\"fill>\n            <Text as=\"h1\">Bonjour Erwan</Text>\n            <Box direction={size ===\"large\" ? \"row\" : \"column\"} gap=\"small\" align=\"center\">\n                <Box >\n                    <Weather pos={pos}/>\n                </Box>\n                <Box >\n                    <Stocks/>\n                </Box>\n                <Box>\n                    <Calendar/>\n                </Box>\n            </Box>   \n        </Box>\n    )\n}\n\nexport default Dashboard;","import React from \"react\";\r\nimport { Grommet, Box, ResponsiveContext  } from \"grommet\";\r\n\r\nimport DashBoard from \"./features/Dashboard/Dashboard\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route\r\n} from \"react-router-dom\";\r\n\r\nconst theme = {\r\n  global: {\r\n    colors: {\r\n      brand: '#cc0000',\r\n      back: \"#022B3A\",\r\n      card: \"#bfdbf7\",\r\n      accent: \"#994650\",\r\n      ok: '#00C781',\r\n    },\r\n    font: {\r\n      family: \"Roboto\",\r\n      size: \"18px\",\r\n      height: \"20px\",\r\n    },\r\n  },\r\n};\r\n\r\nfunction App() {\r\n  const [pos, setPos] = React.useState(\"0px\");\r\n\r\n  const size = React.useContext(ResponsiveContext);\r\n  return (\r\n    <Grommet theme={theme} full>\r\n      <Box fill align=\"center\" justify=\"center\" background=\"back\" onMouseMove={e => {\r\n            let x = 0;\r\n            \r\n            if (size===\"small\"){\r\n                x = (e.screenX-768/2)/768*25+\"px\";\r\n            }else {\r\n                x = (e.screenX-1536/2)/1536*25+\"px\";\r\n            }\r\n\r\n            setPos(x)\r\n            \r\n            }}>\r\n      <Router>\r\n        <Switch>\r\n          <Route path=\"/\">\r\n            <DashBoard pos={pos}/>\r\n          </Route>\r\n        </Switch>\r\n    </Router>\r\n      </Box>\r\n    </Grommet>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\n\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    \r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport App from \"./App\";\r\nimport store from \"./app/store\";\r\nimport { Provider } from \"react-redux\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}